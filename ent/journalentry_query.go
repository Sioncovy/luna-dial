// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"okr-web/ent/journalentry"
	"okr-web/ent/predicate"
	"okr-web/ent/task"
	"okr-web/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JournalEntryQuery is the builder for querying JournalEntry entities.
type JournalEntryQuery struct {
	config
	ctx        *QueryContext
	order      []journalentry.OrderOption
	inters     []Interceptor
	predicates []predicate.JournalEntry
	withUser   *UserQuery
	withTasks  *TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JournalEntryQuery builder.
func (jeq *JournalEntryQuery) Where(ps ...predicate.JournalEntry) *JournalEntryQuery {
	jeq.predicates = append(jeq.predicates, ps...)
	return jeq
}

// Limit the number of records to be returned by this query.
func (jeq *JournalEntryQuery) Limit(limit int) *JournalEntryQuery {
	jeq.ctx.Limit = &limit
	return jeq
}

// Offset to start from.
func (jeq *JournalEntryQuery) Offset(offset int) *JournalEntryQuery {
	jeq.ctx.Offset = &offset
	return jeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jeq *JournalEntryQuery) Unique(unique bool) *JournalEntryQuery {
	jeq.ctx.Unique = &unique
	return jeq
}

// Order specifies how the records should be ordered.
func (jeq *JournalEntryQuery) Order(o ...journalentry.OrderOption) *JournalEntryQuery {
	jeq.order = append(jeq.order, o...)
	return jeq
}

// QueryUser chains the current query on the "user" edge.
func (jeq *JournalEntryQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: jeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(journalentry.Table, journalentry.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, journalentry.UserTable, journalentry.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(jeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (jeq *JournalEntryQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: jeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(journalentry.Table, journalentry.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, journalentry.TasksTable, journalentry.TasksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(jeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JournalEntry entity from the query.
// Returns a *NotFoundError when no JournalEntry was found.
func (jeq *JournalEntryQuery) First(ctx context.Context) (*JournalEntry, error) {
	nodes, err := jeq.Limit(1).All(setContextOp(ctx, jeq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{journalentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jeq *JournalEntryQuery) FirstX(ctx context.Context) *JournalEntry {
	node, err := jeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JournalEntry ID from the query.
// Returns a *NotFoundError when no JournalEntry ID was found.
func (jeq *JournalEntryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jeq.Limit(1).IDs(setContextOp(ctx, jeq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{journalentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jeq *JournalEntryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := jeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JournalEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JournalEntry entity is found.
// Returns a *NotFoundError when no JournalEntry entities are found.
func (jeq *JournalEntryQuery) Only(ctx context.Context) (*JournalEntry, error) {
	nodes, err := jeq.Limit(2).All(setContextOp(ctx, jeq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{journalentry.Label}
	default:
		return nil, &NotSingularError{journalentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jeq *JournalEntryQuery) OnlyX(ctx context.Context) *JournalEntry {
	node, err := jeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JournalEntry ID in the query.
// Returns a *NotSingularError when more than one JournalEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (jeq *JournalEntryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = jeq.Limit(2).IDs(setContextOp(ctx, jeq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{journalentry.Label}
	default:
		err = &NotSingularError{journalentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jeq *JournalEntryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := jeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JournalEntries.
func (jeq *JournalEntryQuery) All(ctx context.Context) ([]*JournalEntry, error) {
	ctx = setContextOp(ctx, jeq.ctx, ent.OpQueryAll)
	if err := jeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JournalEntry, *JournalEntryQuery]()
	return withInterceptors[[]*JournalEntry](ctx, jeq, qr, jeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jeq *JournalEntryQuery) AllX(ctx context.Context) []*JournalEntry {
	nodes, err := jeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JournalEntry IDs.
func (jeq *JournalEntryQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if jeq.ctx.Unique == nil && jeq.path != nil {
		jeq.Unique(true)
	}
	ctx = setContextOp(ctx, jeq.ctx, ent.OpQueryIDs)
	if err = jeq.Select(journalentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jeq *JournalEntryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := jeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jeq *JournalEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jeq.ctx, ent.OpQueryCount)
	if err := jeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jeq, querierCount[*JournalEntryQuery](), jeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jeq *JournalEntryQuery) CountX(ctx context.Context) int {
	count, err := jeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jeq *JournalEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jeq.ctx, ent.OpQueryExist)
	switch _, err := jeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jeq *JournalEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := jeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JournalEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jeq *JournalEntryQuery) Clone() *JournalEntryQuery {
	if jeq == nil {
		return nil
	}
	return &JournalEntryQuery{
		config:     jeq.config,
		ctx:        jeq.ctx.Clone(),
		order:      append([]journalentry.OrderOption{}, jeq.order...),
		inters:     append([]Interceptor{}, jeq.inters...),
		predicates: append([]predicate.JournalEntry{}, jeq.predicates...),
		withUser:   jeq.withUser.Clone(),
		withTasks:  jeq.withTasks.Clone(),
		// clone intermediate query.
		sql:  jeq.sql.Clone(),
		path: jeq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (jeq *JournalEntryQuery) WithUser(opts ...func(*UserQuery)) *JournalEntryQuery {
	query := (&UserClient{config: jeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jeq.withUser = query
	return jeq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (jeq *JournalEntryQuery) WithTasks(opts ...func(*TaskQuery)) *JournalEntryQuery {
	query := (&TaskClient{config: jeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jeq.withTasks = query
	return jeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JournalEntry.Query().
//		GroupBy(journalentry.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jeq *JournalEntryQuery) GroupBy(field string, fields ...string) *JournalEntryGroupBy {
	jeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JournalEntryGroupBy{build: jeq}
	grbuild.flds = &jeq.ctx.Fields
	grbuild.label = journalentry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.JournalEntry.Query().
//		Select(journalentry.FieldContent).
//		Scan(ctx, &v)
func (jeq *JournalEntryQuery) Select(fields ...string) *JournalEntrySelect {
	jeq.ctx.Fields = append(jeq.ctx.Fields, fields...)
	sbuild := &JournalEntrySelect{JournalEntryQuery: jeq}
	sbuild.label = journalentry.Label
	sbuild.flds, sbuild.scan = &jeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JournalEntrySelect configured with the given aggregations.
func (jeq *JournalEntryQuery) Aggregate(fns ...AggregateFunc) *JournalEntrySelect {
	return jeq.Select().Aggregate(fns...)
}

func (jeq *JournalEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jeq); err != nil {
				return err
			}
		}
	}
	for _, f := range jeq.ctx.Fields {
		if !journalentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jeq.path != nil {
		prev, err := jeq.path(ctx)
		if err != nil {
			return err
		}
		jeq.sql = prev
	}
	return nil
}

func (jeq *JournalEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JournalEntry, error) {
	var (
		nodes       = []*JournalEntry{}
		_spec       = jeq.querySpec()
		loadedTypes = [2]bool{
			jeq.withUser != nil,
			jeq.withTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JournalEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JournalEntry{config: jeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jeq.withUser; query != nil {
		if err := jeq.loadUser(ctx, query, nodes, nil,
			func(n *JournalEntry, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := jeq.withTasks; query != nil {
		if err := jeq.loadTasks(ctx, query, nodes,
			func(n *JournalEntry) { n.Edges.Tasks = []*Task{} },
			func(n *JournalEntry, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jeq *JournalEntryQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*JournalEntry, init func(*JournalEntry), assign func(*JournalEntry, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*JournalEntry)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jeq *JournalEntryQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*JournalEntry, init func(*JournalEntry), assign func(*JournalEntry, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*JournalEntry)
	nids := make(map[uuid.UUID]map[*JournalEntry]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(journalentry.TasksTable)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(journalentry.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(journalentry.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(journalentry.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*JournalEntry]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (jeq *JournalEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jeq.querySpec()
	_spec.Node.Columns = jeq.ctx.Fields
	if len(jeq.ctx.Fields) > 0 {
		_spec.Unique = jeq.ctx.Unique != nil && *jeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jeq.driver, _spec)
}

func (jeq *JournalEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(journalentry.Table, journalentry.Columns, sqlgraph.NewFieldSpec(journalentry.FieldID, field.TypeUUID))
	_spec.From = jeq.sql
	if unique := jeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jeq.path != nil {
		_spec.Unique = true
	}
	if fields := jeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, journalentry.FieldID)
		for i := range fields {
			if fields[i] != journalentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if jeq.withUser != nil {
			_spec.Node.AddColumnOnce(journalentry.FieldUserID)
		}
	}
	if ps := jeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jeq *JournalEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jeq.driver.Dialect())
	t1 := builder.Table(journalentry.Table)
	columns := jeq.ctx.Fields
	if len(columns) == 0 {
		columns = journalentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jeq.sql != nil {
		selector = jeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jeq.ctx.Unique != nil && *jeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jeq.predicates {
		p(selector)
	}
	for _, p := range jeq.order {
		p(selector)
	}
	if offset := jeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JournalEntryGroupBy is the group-by builder for JournalEntry entities.
type JournalEntryGroupBy struct {
	selector
	build *JournalEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jegb *JournalEntryGroupBy) Aggregate(fns ...AggregateFunc) *JournalEntryGroupBy {
	jegb.fns = append(jegb.fns, fns...)
	return jegb
}

// Scan applies the selector query and scans the result into the given value.
func (jegb *JournalEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jegb.build.ctx, ent.OpQueryGroupBy)
	if err := jegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JournalEntryQuery, *JournalEntryGroupBy](ctx, jegb.build, jegb, jegb.build.inters, v)
}

func (jegb *JournalEntryGroupBy) sqlScan(ctx context.Context, root *JournalEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jegb.fns))
	for _, fn := range jegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jegb.flds)+len(jegb.fns))
		for _, f := range *jegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JournalEntrySelect is the builder for selecting fields of JournalEntry entities.
type JournalEntrySelect struct {
	*JournalEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jes *JournalEntrySelect) Aggregate(fns ...AggregateFunc) *JournalEntrySelect {
	jes.fns = append(jes.fns, fns...)
	return jes
}

// Scan applies the selector query and scans the result into the given value.
func (jes *JournalEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jes.ctx, ent.OpQuerySelect)
	if err := jes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JournalEntryQuery, *JournalEntrySelect](ctx, jes.JournalEntryQuery, jes, jes.inters, v)
}

func (jes *JournalEntrySelect) sqlScan(ctx context.Context, root *JournalEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jes.fns))
	for _, fn := range jes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
