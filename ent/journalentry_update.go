// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"okr-web/ent/journalentry"
	"okr-web/ent/predicate"
	"okr-web/ent/task"
	"okr-web/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JournalEntryUpdate is the builder for updating JournalEntry entities.
type JournalEntryUpdate struct {
	config
	hooks    []Hook
	mutation *JournalEntryMutation
}

// Where appends a list predicates to the JournalEntryUpdate builder.
func (jeu *JournalEntryUpdate) Where(ps ...predicate.JournalEntry) *JournalEntryUpdate {
	jeu.mutation.Where(ps...)
	return jeu
}

// SetContent sets the "content" field.
func (jeu *JournalEntryUpdate) SetContent(s string) *JournalEntryUpdate {
	jeu.mutation.SetContent(s)
	return jeu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (jeu *JournalEntryUpdate) SetNillableContent(s *string) *JournalEntryUpdate {
	if s != nil {
		jeu.SetContent(*s)
	}
	return jeu
}

// SetTimeReference sets the "time_reference" field.
func (jeu *JournalEntryUpdate) SetTimeReference(s string) *JournalEntryUpdate {
	jeu.mutation.SetTimeReference(s)
	return jeu
}

// SetNillableTimeReference sets the "time_reference" field if the given value is not nil.
func (jeu *JournalEntryUpdate) SetNillableTimeReference(s *string) *JournalEntryUpdate {
	if s != nil {
		jeu.SetTimeReference(*s)
	}
	return jeu
}

// SetTimeScale sets the "time_scale" field.
func (jeu *JournalEntryUpdate) SetTimeScale(js journalentry.TimeScale) *JournalEntryUpdate {
	jeu.mutation.SetTimeScale(js)
	return jeu
}

// SetNillableTimeScale sets the "time_scale" field if the given value is not nil.
func (jeu *JournalEntryUpdate) SetNillableTimeScale(js *journalentry.TimeScale) *JournalEntryUpdate {
	if js != nil {
		jeu.SetTimeScale(*js)
	}
	return jeu
}

// SetEntryType sets the "entry_type" field.
func (jeu *JournalEntryUpdate) SetEntryType(jt journalentry.EntryType) *JournalEntryUpdate {
	jeu.mutation.SetEntryType(jt)
	return jeu
}

// SetNillableEntryType sets the "entry_type" field if the given value is not nil.
func (jeu *JournalEntryUpdate) SetNillableEntryType(jt *journalentry.EntryType) *JournalEntryUpdate {
	if jt != nil {
		jeu.SetEntryType(*jt)
	}
	return jeu
}

// SetUserID sets the "user_id" field.
func (jeu *JournalEntryUpdate) SetUserID(u uuid.UUID) *JournalEntryUpdate {
	jeu.mutation.SetUserID(u)
	return jeu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jeu *JournalEntryUpdate) SetNillableUserID(u *uuid.UUID) *JournalEntryUpdate {
	if u != nil {
		jeu.SetUserID(*u)
	}
	return jeu
}

// SetUpdatedAt sets the "updated_at" field.
func (jeu *JournalEntryUpdate) SetUpdatedAt(t time.Time) *JournalEntryUpdate {
	jeu.mutation.SetUpdatedAt(t)
	return jeu
}

// SetUser sets the "user" edge to the User entity.
func (jeu *JournalEntryUpdate) SetUser(u *User) *JournalEntryUpdate {
	return jeu.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (jeu *JournalEntryUpdate) AddTaskIDs(ids ...uuid.UUID) *JournalEntryUpdate {
	jeu.mutation.AddTaskIDs(ids...)
	return jeu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (jeu *JournalEntryUpdate) AddTasks(t ...*Task) *JournalEntryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jeu.AddTaskIDs(ids...)
}

// Mutation returns the JournalEntryMutation object of the builder.
func (jeu *JournalEntryUpdate) Mutation() *JournalEntryMutation {
	return jeu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jeu *JournalEntryUpdate) ClearUser() *JournalEntryUpdate {
	jeu.mutation.ClearUser()
	return jeu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (jeu *JournalEntryUpdate) ClearTasks() *JournalEntryUpdate {
	jeu.mutation.ClearTasks()
	return jeu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (jeu *JournalEntryUpdate) RemoveTaskIDs(ids ...uuid.UUID) *JournalEntryUpdate {
	jeu.mutation.RemoveTaskIDs(ids...)
	return jeu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (jeu *JournalEntryUpdate) RemoveTasks(t ...*Task) *JournalEntryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jeu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jeu *JournalEntryUpdate) Save(ctx context.Context) (int, error) {
	jeu.defaults()
	return withHooks(ctx, jeu.sqlSave, jeu.mutation, jeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jeu *JournalEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := jeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jeu *JournalEntryUpdate) Exec(ctx context.Context) error {
	_, err := jeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jeu *JournalEntryUpdate) ExecX(ctx context.Context) {
	if err := jeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jeu *JournalEntryUpdate) defaults() {
	if _, ok := jeu.mutation.UpdatedAt(); !ok {
		v := journalentry.UpdateDefaultUpdatedAt()
		jeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jeu *JournalEntryUpdate) check() error {
	if v, ok := jeu.mutation.Content(); ok {
		if err := journalentry.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.content": %w`, err)}
		}
	}
	if v, ok := jeu.mutation.TimeReference(); ok {
		if err := journalentry.TimeReferenceValidator(v); err != nil {
			return &ValidationError{Name: "time_reference", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_reference": %w`, err)}
		}
	}
	if v, ok := jeu.mutation.TimeScale(); ok {
		if err := journalentry.TimeScaleValidator(v); err != nil {
			return &ValidationError{Name: "time_scale", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_scale": %w`, err)}
		}
	}
	if v, ok := jeu.mutation.EntryType(); ok {
		if err := journalentry.EntryTypeValidator(v); err != nil {
			return &ValidationError{Name: "entry_type", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.entry_type": %w`, err)}
		}
	}
	if jeu.mutation.UserCleared() && len(jeu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JournalEntry.user"`)
	}
	return nil
}

func (jeu *JournalEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(journalentry.Table, journalentry.Columns, sqlgraph.NewFieldSpec(journalentry.FieldID, field.TypeUUID))
	if ps := jeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jeu.mutation.Content(); ok {
		_spec.SetField(journalentry.FieldContent, field.TypeString, value)
	}
	if value, ok := jeu.mutation.TimeReference(); ok {
		_spec.SetField(journalentry.FieldTimeReference, field.TypeString, value)
	}
	if value, ok := jeu.mutation.TimeScale(); ok {
		_spec.SetField(journalentry.FieldTimeScale, field.TypeEnum, value)
	}
	if value, ok := jeu.mutation.EntryType(); ok {
		_spec.SetField(journalentry.FieldEntryType, field.TypeEnum, value)
	}
	if value, ok := jeu.mutation.UpdatedAt(); ok {
		_spec.SetField(journalentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if jeu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   journalentry.UserTable,
			Columns: []string{journalentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   journalentry.UserTable,
			Columns: []string{journalentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jeu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !jeu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{journalentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jeu.mutation.done = true
	return n, nil
}

// JournalEntryUpdateOne is the builder for updating a single JournalEntry entity.
type JournalEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JournalEntryMutation
}

// SetContent sets the "content" field.
func (jeuo *JournalEntryUpdateOne) SetContent(s string) *JournalEntryUpdateOne {
	jeuo.mutation.SetContent(s)
	return jeuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (jeuo *JournalEntryUpdateOne) SetNillableContent(s *string) *JournalEntryUpdateOne {
	if s != nil {
		jeuo.SetContent(*s)
	}
	return jeuo
}

// SetTimeReference sets the "time_reference" field.
func (jeuo *JournalEntryUpdateOne) SetTimeReference(s string) *JournalEntryUpdateOne {
	jeuo.mutation.SetTimeReference(s)
	return jeuo
}

// SetNillableTimeReference sets the "time_reference" field if the given value is not nil.
func (jeuo *JournalEntryUpdateOne) SetNillableTimeReference(s *string) *JournalEntryUpdateOne {
	if s != nil {
		jeuo.SetTimeReference(*s)
	}
	return jeuo
}

// SetTimeScale sets the "time_scale" field.
func (jeuo *JournalEntryUpdateOne) SetTimeScale(js journalentry.TimeScale) *JournalEntryUpdateOne {
	jeuo.mutation.SetTimeScale(js)
	return jeuo
}

// SetNillableTimeScale sets the "time_scale" field if the given value is not nil.
func (jeuo *JournalEntryUpdateOne) SetNillableTimeScale(js *journalentry.TimeScale) *JournalEntryUpdateOne {
	if js != nil {
		jeuo.SetTimeScale(*js)
	}
	return jeuo
}

// SetEntryType sets the "entry_type" field.
func (jeuo *JournalEntryUpdateOne) SetEntryType(jt journalentry.EntryType) *JournalEntryUpdateOne {
	jeuo.mutation.SetEntryType(jt)
	return jeuo
}

// SetNillableEntryType sets the "entry_type" field if the given value is not nil.
func (jeuo *JournalEntryUpdateOne) SetNillableEntryType(jt *journalentry.EntryType) *JournalEntryUpdateOne {
	if jt != nil {
		jeuo.SetEntryType(*jt)
	}
	return jeuo
}

// SetUserID sets the "user_id" field.
func (jeuo *JournalEntryUpdateOne) SetUserID(u uuid.UUID) *JournalEntryUpdateOne {
	jeuo.mutation.SetUserID(u)
	return jeuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jeuo *JournalEntryUpdateOne) SetNillableUserID(u *uuid.UUID) *JournalEntryUpdateOne {
	if u != nil {
		jeuo.SetUserID(*u)
	}
	return jeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jeuo *JournalEntryUpdateOne) SetUpdatedAt(t time.Time) *JournalEntryUpdateOne {
	jeuo.mutation.SetUpdatedAt(t)
	return jeuo
}

// SetUser sets the "user" edge to the User entity.
func (jeuo *JournalEntryUpdateOne) SetUser(u *User) *JournalEntryUpdateOne {
	return jeuo.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (jeuo *JournalEntryUpdateOne) AddTaskIDs(ids ...uuid.UUID) *JournalEntryUpdateOne {
	jeuo.mutation.AddTaskIDs(ids...)
	return jeuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (jeuo *JournalEntryUpdateOne) AddTasks(t ...*Task) *JournalEntryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jeuo.AddTaskIDs(ids...)
}

// Mutation returns the JournalEntryMutation object of the builder.
func (jeuo *JournalEntryUpdateOne) Mutation() *JournalEntryMutation {
	return jeuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jeuo *JournalEntryUpdateOne) ClearUser() *JournalEntryUpdateOne {
	jeuo.mutation.ClearUser()
	return jeuo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (jeuo *JournalEntryUpdateOne) ClearTasks() *JournalEntryUpdateOne {
	jeuo.mutation.ClearTasks()
	return jeuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (jeuo *JournalEntryUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *JournalEntryUpdateOne {
	jeuo.mutation.RemoveTaskIDs(ids...)
	return jeuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (jeuo *JournalEntryUpdateOne) RemoveTasks(t ...*Task) *JournalEntryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jeuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the JournalEntryUpdate builder.
func (jeuo *JournalEntryUpdateOne) Where(ps ...predicate.JournalEntry) *JournalEntryUpdateOne {
	jeuo.mutation.Where(ps...)
	return jeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jeuo *JournalEntryUpdateOne) Select(field string, fields ...string) *JournalEntryUpdateOne {
	jeuo.fields = append([]string{field}, fields...)
	return jeuo
}

// Save executes the query and returns the updated JournalEntry entity.
func (jeuo *JournalEntryUpdateOne) Save(ctx context.Context) (*JournalEntry, error) {
	jeuo.defaults()
	return withHooks(ctx, jeuo.sqlSave, jeuo.mutation, jeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jeuo *JournalEntryUpdateOne) SaveX(ctx context.Context) *JournalEntry {
	node, err := jeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jeuo *JournalEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := jeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jeuo *JournalEntryUpdateOne) ExecX(ctx context.Context) {
	if err := jeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jeuo *JournalEntryUpdateOne) defaults() {
	if _, ok := jeuo.mutation.UpdatedAt(); !ok {
		v := journalentry.UpdateDefaultUpdatedAt()
		jeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jeuo *JournalEntryUpdateOne) check() error {
	if v, ok := jeuo.mutation.Content(); ok {
		if err := journalentry.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.content": %w`, err)}
		}
	}
	if v, ok := jeuo.mutation.TimeReference(); ok {
		if err := journalentry.TimeReferenceValidator(v); err != nil {
			return &ValidationError{Name: "time_reference", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_reference": %w`, err)}
		}
	}
	if v, ok := jeuo.mutation.TimeScale(); ok {
		if err := journalentry.TimeScaleValidator(v); err != nil {
			return &ValidationError{Name: "time_scale", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_scale": %w`, err)}
		}
	}
	if v, ok := jeuo.mutation.EntryType(); ok {
		if err := journalentry.EntryTypeValidator(v); err != nil {
			return &ValidationError{Name: "entry_type", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.entry_type": %w`, err)}
		}
	}
	if jeuo.mutation.UserCleared() && len(jeuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JournalEntry.user"`)
	}
	return nil
}

func (jeuo *JournalEntryUpdateOne) sqlSave(ctx context.Context) (_node *JournalEntry, err error) {
	if err := jeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(journalentry.Table, journalentry.Columns, sqlgraph.NewFieldSpec(journalentry.FieldID, field.TypeUUID))
	id, ok := jeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JournalEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, journalentry.FieldID)
		for _, f := range fields {
			if !journalentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != journalentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jeuo.mutation.Content(); ok {
		_spec.SetField(journalentry.FieldContent, field.TypeString, value)
	}
	if value, ok := jeuo.mutation.TimeReference(); ok {
		_spec.SetField(journalentry.FieldTimeReference, field.TypeString, value)
	}
	if value, ok := jeuo.mutation.TimeScale(); ok {
		_spec.SetField(journalentry.FieldTimeScale, field.TypeEnum, value)
	}
	if value, ok := jeuo.mutation.EntryType(); ok {
		_spec.SetField(journalentry.FieldEntryType, field.TypeEnum, value)
	}
	if value, ok := jeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(journalentry.FieldUpdatedAt, field.TypeTime, value)
	}
	if jeuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   journalentry.UserTable,
			Columns: []string{journalentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   journalentry.UserTable,
			Columns: []string{journalentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jeuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !jeuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jeuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JournalEntry{config: jeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{journalentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jeuo.mutation.done = true
	return _node, nil
}
