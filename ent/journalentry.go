// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"okr-web/ent/journalentry"
	"okr-web/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// JournalEntry is the model entity for the JournalEntry schema.
type JournalEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// 时间引用，如'2025年7月'或'2025年W28周'
	TimeReference string `json:"time_reference,omitempty"`
	// TimeScale holds the value of the "time_scale" field.
	TimeScale journalentry.TimeScale `json:"time_scale,omitempty"`
	// EntryType holds the value of the "entry_type" field.
	EntryType journalentry.EntryType `json:"entry_type,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JournalEntryQuery when eager-loading is set.
	Edges        JournalEntryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JournalEntryEdges holds the relations/edges for other nodes in the graph.
type JournalEntryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JournalEntryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e JournalEntryEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JournalEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case journalentry.FieldContent, journalentry.FieldTimeReference, journalentry.FieldTimeScale, journalentry.FieldEntryType:
			values[i] = new(sql.NullString)
		case journalentry.FieldCreatedAt, journalentry.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case journalentry.FieldID, journalentry.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JournalEntry fields.
func (je *JournalEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case journalentry.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				je.ID = *value
			}
		case journalentry.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				je.Content = value.String
			}
		case journalentry.FieldTimeReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_reference", values[i])
			} else if value.Valid {
				je.TimeReference = value.String
			}
		case journalentry.FieldTimeScale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_scale", values[i])
			} else if value.Valid {
				je.TimeScale = journalentry.TimeScale(value.String)
			}
		case journalentry.FieldEntryType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_type", values[i])
			} else if value.Valid {
				je.EntryType = journalentry.EntryType(value.String)
			}
		case journalentry.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				je.UserID = *value
			}
		case journalentry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				je.CreatedAt = value.Time
			}
		case journalentry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				je.UpdatedAt = value.Time
			}
		default:
			je.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JournalEntry.
// This includes values selected through modifiers, order, etc.
func (je *JournalEntry) Value(name string) (ent.Value, error) {
	return je.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the JournalEntry entity.
func (je *JournalEntry) QueryUser() *UserQuery {
	return NewJournalEntryClient(je.config).QueryUser(je)
}

// QueryTasks queries the "tasks" edge of the JournalEntry entity.
func (je *JournalEntry) QueryTasks() *TaskQuery {
	return NewJournalEntryClient(je.config).QueryTasks(je)
}

// Update returns a builder for updating this JournalEntry.
// Note that you need to call JournalEntry.Unwrap() before calling this method if this JournalEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (je *JournalEntry) Update() *JournalEntryUpdateOne {
	return NewJournalEntryClient(je.config).UpdateOne(je)
}

// Unwrap unwraps the JournalEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (je *JournalEntry) Unwrap() *JournalEntry {
	_tx, ok := je.config.driver.(*txDriver)
	if !ok {
		panic("ent: JournalEntry is not a transactional entity")
	}
	je.config.driver = _tx.drv
	return je
}

// String implements the fmt.Stringer.
func (je *JournalEntry) String() string {
	var builder strings.Builder
	builder.WriteString("JournalEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", je.ID))
	builder.WriteString("content=")
	builder.WriteString(je.Content)
	builder.WriteString(", ")
	builder.WriteString("time_reference=")
	builder.WriteString(je.TimeReference)
	builder.WriteString(", ")
	builder.WriteString("time_scale=")
	builder.WriteString(fmt.Sprintf("%v", je.TimeScale))
	builder.WriteString(", ")
	builder.WriteString("entry_type=")
	builder.WriteString(fmt.Sprintf("%v", je.EntryType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", je.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(je.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(je.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JournalEntries is a parsable slice of JournalEntry.
type JournalEntries []*JournalEntry
