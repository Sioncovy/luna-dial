// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"okr-web/ent/journalentry"
	"okr-web/ent/task"
	"okr-web/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JournalEntryCreate is the builder for creating a JournalEntry entity.
type JournalEntryCreate struct {
	config
	mutation *JournalEntryMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (jec *JournalEntryCreate) SetContent(s string) *JournalEntryCreate {
	jec.mutation.SetContent(s)
	return jec
}

// SetTimeReference sets the "time_reference" field.
func (jec *JournalEntryCreate) SetTimeReference(s string) *JournalEntryCreate {
	jec.mutation.SetTimeReference(s)
	return jec
}

// SetTimeScale sets the "time_scale" field.
func (jec *JournalEntryCreate) SetTimeScale(js journalentry.TimeScale) *JournalEntryCreate {
	jec.mutation.SetTimeScale(js)
	return jec
}

// SetNillableTimeScale sets the "time_scale" field if the given value is not nil.
func (jec *JournalEntryCreate) SetNillableTimeScale(js *journalentry.TimeScale) *JournalEntryCreate {
	if js != nil {
		jec.SetTimeScale(*js)
	}
	return jec
}

// SetEntryType sets the "entry_type" field.
func (jec *JournalEntryCreate) SetEntryType(jt journalentry.EntryType) *JournalEntryCreate {
	jec.mutation.SetEntryType(jt)
	return jec
}

// SetNillableEntryType sets the "entry_type" field if the given value is not nil.
func (jec *JournalEntryCreate) SetNillableEntryType(jt *journalentry.EntryType) *JournalEntryCreate {
	if jt != nil {
		jec.SetEntryType(*jt)
	}
	return jec
}

// SetUserID sets the "user_id" field.
func (jec *JournalEntryCreate) SetUserID(u uuid.UUID) *JournalEntryCreate {
	jec.mutation.SetUserID(u)
	return jec
}

// SetCreatedAt sets the "created_at" field.
func (jec *JournalEntryCreate) SetCreatedAt(t time.Time) *JournalEntryCreate {
	jec.mutation.SetCreatedAt(t)
	return jec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jec *JournalEntryCreate) SetNillableCreatedAt(t *time.Time) *JournalEntryCreate {
	if t != nil {
		jec.SetCreatedAt(*t)
	}
	return jec
}

// SetUpdatedAt sets the "updated_at" field.
func (jec *JournalEntryCreate) SetUpdatedAt(t time.Time) *JournalEntryCreate {
	jec.mutation.SetUpdatedAt(t)
	return jec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jec *JournalEntryCreate) SetNillableUpdatedAt(t *time.Time) *JournalEntryCreate {
	if t != nil {
		jec.SetUpdatedAt(*t)
	}
	return jec
}

// SetID sets the "id" field.
func (jec *JournalEntryCreate) SetID(u uuid.UUID) *JournalEntryCreate {
	jec.mutation.SetID(u)
	return jec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jec *JournalEntryCreate) SetNillableID(u *uuid.UUID) *JournalEntryCreate {
	if u != nil {
		jec.SetID(*u)
	}
	return jec
}

// SetUser sets the "user" edge to the User entity.
func (jec *JournalEntryCreate) SetUser(u *User) *JournalEntryCreate {
	return jec.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (jec *JournalEntryCreate) AddTaskIDs(ids ...uuid.UUID) *JournalEntryCreate {
	jec.mutation.AddTaskIDs(ids...)
	return jec
}

// AddTasks adds the "tasks" edges to the Task entity.
func (jec *JournalEntryCreate) AddTasks(t ...*Task) *JournalEntryCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jec.AddTaskIDs(ids...)
}

// Mutation returns the JournalEntryMutation object of the builder.
func (jec *JournalEntryCreate) Mutation() *JournalEntryMutation {
	return jec.mutation
}

// Save creates the JournalEntry in the database.
func (jec *JournalEntryCreate) Save(ctx context.Context) (*JournalEntry, error) {
	jec.defaults()
	return withHooks(ctx, jec.sqlSave, jec.mutation, jec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jec *JournalEntryCreate) SaveX(ctx context.Context) *JournalEntry {
	v, err := jec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jec *JournalEntryCreate) Exec(ctx context.Context) error {
	_, err := jec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jec *JournalEntryCreate) ExecX(ctx context.Context) {
	if err := jec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jec *JournalEntryCreate) defaults() {
	if _, ok := jec.mutation.TimeScale(); !ok {
		v := journalentry.DefaultTimeScale
		jec.mutation.SetTimeScale(v)
	}
	if _, ok := jec.mutation.EntryType(); !ok {
		v := journalentry.DefaultEntryType
		jec.mutation.SetEntryType(v)
	}
	if _, ok := jec.mutation.CreatedAt(); !ok {
		v := journalentry.DefaultCreatedAt()
		jec.mutation.SetCreatedAt(v)
	}
	if _, ok := jec.mutation.UpdatedAt(); !ok {
		v := journalentry.DefaultUpdatedAt()
		jec.mutation.SetUpdatedAt(v)
	}
	if _, ok := jec.mutation.ID(); !ok {
		v := journalentry.DefaultID()
		jec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jec *JournalEntryCreate) check() error {
	if _, ok := jec.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "JournalEntry.content"`)}
	}
	if v, ok := jec.mutation.Content(); ok {
		if err := journalentry.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.content": %w`, err)}
		}
	}
	if _, ok := jec.mutation.TimeReference(); !ok {
		return &ValidationError{Name: "time_reference", err: errors.New(`ent: missing required field "JournalEntry.time_reference"`)}
	}
	if v, ok := jec.mutation.TimeReference(); ok {
		if err := journalentry.TimeReferenceValidator(v); err != nil {
			return &ValidationError{Name: "time_reference", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_reference": %w`, err)}
		}
	}
	if _, ok := jec.mutation.TimeScale(); !ok {
		return &ValidationError{Name: "time_scale", err: errors.New(`ent: missing required field "JournalEntry.time_scale"`)}
	}
	if v, ok := jec.mutation.TimeScale(); ok {
		if err := journalentry.TimeScaleValidator(v); err != nil {
			return &ValidationError{Name: "time_scale", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.time_scale": %w`, err)}
		}
	}
	if _, ok := jec.mutation.EntryType(); !ok {
		return &ValidationError{Name: "entry_type", err: errors.New(`ent: missing required field "JournalEntry.entry_type"`)}
	}
	if v, ok := jec.mutation.EntryType(); ok {
		if err := journalentry.EntryTypeValidator(v); err != nil {
			return &ValidationError{Name: "entry_type", err: fmt.Errorf(`ent: validator failed for field "JournalEntry.entry_type": %w`, err)}
		}
	}
	if _, ok := jec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "JournalEntry.user_id"`)}
	}
	if _, ok := jec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JournalEntry.created_at"`)}
	}
	if _, ok := jec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JournalEntry.updated_at"`)}
	}
	if len(jec.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "JournalEntry.user"`)}
	}
	return nil
}

func (jec *JournalEntryCreate) sqlSave(ctx context.Context) (*JournalEntry, error) {
	if err := jec.check(); err != nil {
		return nil, err
	}
	_node, _spec := jec.createSpec()
	if err := sqlgraph.CreateNode(ctx, jec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jec.mutation.id = &_node.ID
	jec.mutation.done = true
	return _node, nil
}

func (jec *JournalEntryCreate) createSpec() (*JournalEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &JournalEntry{config: jec.config}
		_spec = sqlgraph.NewCreateSpec(journalentry.Table, sqlgraph.NewFieldSpec(journalentry.FieldID, field.TypeUUID))
	)
	if id, ok := jec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jec.mutation.Content(); ok {
		_spec.SetField(journalentry.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := jec.mutation.TimeReference(); ok {
		_spec.SetField(journalentry.FieldTimeReference, field.TypeString, value)
		_node.TimeReference = value
	}
	if value, ok := jec.mutation.TimeScale(); ok {
		_spec.SetField(journalentry.FieldTimeScale, field.TypeEnum, value)
		_node.TimeScale = value
	}
	if value, ok := jec.mutation.EntryType(); ok {
		_spec.SetField(journalentry.FieldEntryType, field.TypeEnum, value)
		_node.EntryType = value
	}
	if value, ok := jec.mutation.CreatedAt(); ok {
		_spec.SetField(journalentry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jec.mutation.UpdatedAt(); ok {
		_spec.SetField(journalentry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   journalentry.UserTable,
			Columns: []string{journalentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jec.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   journalentry.TasksTable,
			Columns: journalentry.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JournalEntryCreateBulk is the builder for creating many JournalEntry entities in bulk.
type JournalEntryCreateBulk struct {
	config
	err      error
	builders []*JournalEntryCreate
}

// Save creates the JournalEntry entities in the database.
func (jecb *JournalEntryCreateBulk) Save(ctx context.Context) ([]*JournalEntry, error) {
	if jecb.err != nil {
		return nil, jecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jecb.builders))
	nodes := make([]*JournalEntry, len(jecb.builders))
	mutators := make([]Mutator, len(jecb.builders))
	for i := range jecb.builders {
		func(i int, root context.Context) {
			builder := jecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JournalEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jecb *JournalEntryCreateBulk) SaveX(ctx context.Context) []*JournalEntry {
	v, err := jecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jecb *JournalEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := jecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jecb *JournalEntryCreateBulk) ExecX(ctx context.Context) {
	if err := jecb.Exec(ctx); err != nil {
		panic(err)
	}
}
