// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"okr-web/ent/journalentry"
	"okr-web/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JournalEntryDelete is the builder for deleting a JournalEntry entity.
type JournalEntryDelete struct {
	config
	hooks    []Hook
	mutation *JournalEntryMutation
}

// Where appends a list predicates to the JournalEntryDelete builder.
func (jed *JournalEntryDelete) Where(ps ...predicate.JournalEntry) *JournalEntryDelete {
	jed.mutation.Where(ps...)
	return jed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jed *JournalEntryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jed.sqlExec, jed.mutation, jed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jed *JournalEntryDelete) ExecX(ctx context.Context) int {
	n, err := jed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jed *JournalEntryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(journalentry.Table, sqlgraph.NewFieldSpec(journalentry.FieldID, field.TypeUUID))
	if ps := jed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jed.mutation.done = true
	return affected, err
}

// JournalEntryDeleteOne is the builder for deleting a single JournalEntry entity.
type JournalEntryDeleteOne struct {
	jed *JournalEntryDelete
}

// Where appends a list predicates to the JournalEntryDelete builder.
func (jedo *JournalEntryDeleteOne) Where(ps ...predicate.JournalEntry) *JournalEntryDeleteOne {
	jedo.jed.mutation.Where(ps...)
	return jedo
}

// Exec executes the deletion query.
func (jedo *JournalEntryDeleteOne) Exec(ctx context.Context) error {
	n, err := jedo.jed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{journalentry.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jedo *JournalEntryDeleteOne) ExecX(ctx context.Context) {
	if err := jedo.Exec(ctx); err != nil {
		panic(err)
	}
}
