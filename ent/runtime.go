// Code generated by ent, DO NOT EDIT.

package ent

import (
	"okr-web/ent/journalentry"
	"okr-web/ent/schema"
	"okr-web/ent/task"
	"okr-web/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	journalentryFields := schema.JournalEntry{}.Fields()
	_ = journalentryFields
	// journalentryDescContent is the schema descriptor for content field.
	journalentryDescContent := journalentryFields[1].Descriptor()
	// journalentry.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	journalentry.ContentValidator = journalentryDescContent.Validators[0].(func(string) error)
	// journalentryDescTimeReference is the schema descriptor for time_reference field.
	journalentryDescTimeReference := journalentryFields[2].Descriptor()
	// journalentry.TimeReferenceValidator is a validator for the "time_reference" field. It is called by the builders before save.
	journalentry.TimeReferenceValidator = func() func(string) error {
		validators := journalentryDescTimeReference.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(time_reference string) error {
			for _, fn := range fns {
				if err := fn(time_reference); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// journalentryDescCreatedAt is the schema descriptor for created_at field.
	journalentryDescCreatedAt := journalentryFields[6].Descriptor()
	// journalentry.DefaultCreatedAt holds the default value on creation for the created_at field.
	journalentry.DefaultCreatedAt = journalentryDescCreatedAt.Default.(func() time.Time)
	// journalentryDescUpdatedAt is the schema descriptor for updated_at field.
	journalentryDescUpdatedAt := journalentryFields[7].Descriptor()
	// journalentry.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	journalentry.DefaultUpdatedAt = journalentryDescUpdatedAt.Default.(func() time.Time)
	// journalentry.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	journalentry.UpdateDefaultUpdatedAt = journalentryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// journalentryDescID is the schema descriptor for id field.
	journalentryDescID := journalentryFields[0].Descriptor()
	// journalentry.DefaultID holds the default value on creation for the id field.
	journalentry.DefaultID = journalentryDescID.Default.(func() uuid.UUID)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[1].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = func() func(string) error {
		validators := taskDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescStartDate is the schema descriptor for start_date field.
	taskDescStartDate := taskFields[4].Descriptor()
	// task.DefaultStartDate holds the default value on creation for the start_date field.
	task.DefaultStartDate = taskDescStartDate.Default.(func() time.Time)
	// taskDescEndDate is the schema descriptor for end_date field.
	taskDescEndDate := taskFields[5].Descriptor()
	// task.DefaultEndDate holds the default value on creation for the end_date field.
	task.DefaultEndDate = taskDescEndDate.Default.(func() time.Time)
	// taskDescScore is the schema descriptor for score field.
	taskDescScore := taskFields[7].Descriptor()
	// task.DefaultScore holds the default value on creation for the score field.
	task.DefaultScore = taskDescScore.Default.(int)
	// task.ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	task.ScoreValidator = func() func(int) error {
		validators := taskDescScore.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(score int) error {
			for _, fn := range fns {
				if err := fn(score); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescTags is the schema descriptor for tags field.
	taskDescTags := taskFields[10].Descriptor()
	// task.TagsValidator is a validator for the "tags" field. It is called by the builders before save.
	task.TagsValidator = taskDescTags.Validators[0].(func(string) error)
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[11].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescUpdatedAt is the schema descriptor for updated_at field.
	taskDescUpdatedAt := taskFields[12].Descriptor()
	// task.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	task.DefaultUpdatedAt = taskDescUpdatedAt.Default.(func() time.Time)
	// task.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	task.UpdateDefaultUpdatedAt = taskDescUpdatedAt.UpdateDefault.(func() time.Time)
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskFields[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
