// Code generated by ent, DO NOT EDIT.

package journalentry

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the journalentry type in the database.
	Label = "journal_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldTimeReference holds the string denoting the time_reference field in the database.
	FieldTimeReference = "time_reference"
	// FieldTimeScale holds the string denoting the time_scale field in the database.
	FieldTimeScale = "time_scale"
	// FieldEntryType holds the string denoting the entry_type field in the database.
	FieldEntryType = "entry_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the journalentry in the database.
	Table = "journal_entries"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "journal_entries"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "journal_entry_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
)

// Columns holds all SQL columns for journalentry fields.
var Columns = []string{
	FieldID,
	FieldContent,
	FieldTimeReference,
	FieldTimeScale,
	FieldEntryType,
	FieldUserID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"journal_entry_id", "task_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// TimeReferenceValidator is a validator for the "time_reference" field. It is called by the builders before save.
	TimeReferenceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TimeScale defines the type for the "time_scale" enum field.
type TimeScale string

// TimeScaleDay is the default value of the TimeScale enum.
const DefaultTimeScale = TimeScaleDay

// TimeScale values.
const (
	TimeScaleDay     TimeScale = "day"
	TimeScaleWeek    TimeScale = "week"
	TimeScaleMonth   TimeScale = "month"
	TimeScaleQuarter TimeScale = "quarter"
	TimeScaleYear    TimeScale = "year"
)

func (ts TimeScale) String() string {
	return string(ts)
}

// TimeScaleValidator is a validator for the "time_scale" field enum values. It is called by the builders before save.
func TimeScaleValidator(ts TimeScale) error {
	switch ts {
	case TimeScaleDay, TimeScaleWeek, TimeScaleMonth, TimeScaleQuarter, TimeScaleYear:
		return nil
	default:
		return fmt.Errorf("journalentry: invalid enum value for time_scale field: %q", ts)
	}
}

// EntryType defines the type for the "entry_type" enum field.
type EntryType string

// EntryTypeReflection is the default value of the EntryType enum.
const DefaultEntryType = EntryTypeReflection

// EntryType values.
const (
	EntryTypePlanStart  EntryType = "plan-start"
	EntryTypeReflection EntryType = "reflection"
	EntryTypeSummary    EntryType = "summary"
)

func (et EntryType) String() string {
	return string(et)
}

// EntryTypeValidator is a validator for the "entry_type" field enum values. It is called by the builders before save.
func EntryTypeValidator(et EntryType) error {
	switch et {
	case EntryTypePlanStart, EntryTypeReflection, EntryTypeSummary:
		return nil
	default:
		return fmt.Errorf("journalentry: invalid enum value for entry_type field: %q", et)
	}
}

// OrderOption defines the ordering options for the JournalEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByTimeReference orders the results by the time_reference field.
func ByTimeReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeReference, opts...).ToFunc()
}

// ByTimeScale orders the results by the time_scale field.
func ByTimeScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeScale, opts...).ToFunc()
}

// ByEntryType orders the results by the entry_type field.
func ByEntryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryType, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
