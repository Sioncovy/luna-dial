// Code generated by ent, DO NOT EDIT.

package journalentry

import (
	"okr-web/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLTE(FieldID, id))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldContent, v))
}

// TimeReference applies equality check predicate on the "time_reference" field. It's identical to TimeReferenceEQ.
func TimeReference(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldTimeReference, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldContainsFold(FieldContent, v))
}

// TimeReferenceEQ applies the EQ predicate on the "time_reference" field.
func TimeReferenceEQ(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldTimeReference, v))
}

// TimeReferenceNEQ applies the NEQ predicate on the "time_reference" field.
func TimeReferenceNEQ(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldTimeReference, v))
}

// TimeReferenceIn applies the In predicate on the "time_reference" field.
func TimeReferenceIn(vs ...string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldTimeReference, vs...))
}

// TimeReferenceNotIn applies the NotIn predicate on the "time_reference" field.
func TimeReferenceNotIn(vs ...string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldTimeReference, vs...))
}

// TimeReferenceGT applies the GT predicate on the "time_reference" field.
func TimeReferenceGT(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGT(FieldTimeReference, v))
}

// TimeReferenceGTE applies the GTE predicate on the "time_reference" field.
func TimeReferenceGTE(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGTE(FieldTimeReference, v))
}

// TimeReferenceLT applies the LT predicate on the "time_reference" field.
func TimeReferenceLT(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLT(FieldTimeReference, v))
}

// TimeReferenceLTE applies the LTE predicate on the "time_reference" field.
func TimeReferenceLTE(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLTE(FieldTimeReference, v))
}

// TimeReferenceContains applies the Contains predicate on the "time_reference" field.
func TimeReferenceContains(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldContains(FieldTimeReference, v))
}

// TimeReferenceHasPrefix applies the HasPrefix predicate on the "time_reference" field.
func TimeReferenceHasPrefix(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldHasPrefix(FieldTimeReference, v))
}

// TimeReferenceHasSuffix applies the HasSuffix predicate on the "time_reference" field.
func TimeReferenceHasSuffix(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldHasSuffix(FieldTimeReference, v))
}

// TimeReferenceEqualFold applies the EqualFold predicate on the "time_reference" field.
func TimeReferenceEqualFold(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEqualFold(FieldTimeReference, v))
}

// TimeReferenceContainsFold applies the ContainsFold predicate on the "time_reference" field.
func TimeReferenceContainsFold(v string) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldContainsFold(FieldTimeReference, v))
}

// TimeScaleEQ applies the EQ predicate on the "time_scale" field.
func TimeScaleEQ(v TimeScale) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldTimeScale, v))
}

// TimeScaleNEQ applies the NEQ predicate on the "time_scale" field.
func TimeScaleNEQ(v TimeScale) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldTimeScale, v))
}

// TimeScaleIn applies the In predicate on the "time_scale" field.
func TimeScaleIn(vs ...TimeScale) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldTimeScale, vs...))
}

// TimeScaleNotIn applies the NotIn predicate on the "time_scale" field.
func TimeScaleNotIn(vs ...TimeScale) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldTimeScale, vs...))
}

// EntryTypeEQ applies the EQ predicate on the "entry_type" field.
func EntryTypeEQ(v EntryType) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldEntryType, v))
}

// EntryTypeNEQ applies the NEQ predicate on the "entry_type" field.
func EntryTypeNEQ(v EntryType) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldEntryType, v))
}

// EntryTypeIn applies the In predicate on the "entry_type" field.
func EntryTypeIn(vs ...EntryType) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldEntryType, vs...))
}

// EntryTypeNotIn applies the NotIn predicate on the "entry_type" field.
func EntryTypeNotIn(vs ...EntryType) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldEntryType, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldUserID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JournalEntry {
	return predicate.JournalEntry(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.JournalEntry {
	return predicate.JournalEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.JournalEntry {
	return predicate.JournalEntry(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.JournalEntry {
	return predicate.JournalEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.JournalEntry {
	return predicate.JournalEntry(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JournalEntry) predicate.JournalEntry {
	return predicate.JournalEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JournalEntry) predicate.JournalEntry {
	return predicate.JournalEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JournalEntry) predicate.JournalEntry {
	return predicate.JournalEntry(sql.NotPredicates(p))
}
